/*---------------------------------------------------------------------------------------------*/
/*  Abed Zadehgol                                                           DATE : 2015/10/10  */
/*                                                                                             */
/*  This is a simple C code which uses the d2z6 mode of the CSKM (with LB streaming) to        */      
/*  simulate the nearly incompressible fluid flows.                                            */
/*                                                                                             */
/*                                                                                             */
/*  Note:                                                                                      */
/*    (1)  The program generates an output data file, "FIELD.DAT", in "Tecplot" format.        */
/*         The output file contains the information of the following fields:                   */
/*           [a] velocity  (ux, uy)                                                            */
/*	 	     [b] density   (ro)                                                                */
/*			 [c] pressure  (P)                                                                 */
/*			 [d] entropy   (S)                                                                 */
/*           [e] Si        (to plot the steamlines)                                            */ 
/*                                                                                             */
/*    (2)   A second version of this program, in graphics mode, is also available.             */
/*          To use the second version (with graphical representations) you need to install     */
/*          GLUT and properly set the compliler.                                               */
/*                                                                                             */
/*    (3)   To see the contour plots, load the file FIELD.DAT into tecplot, go to contour,     */
/*           mode, switch from "flood" to "lines", and choose the desired field.               */
/*                                                                                             */
/*    (4)   Adjust the adjustable parameters below.                                            */


// ---------------------------------  the adjustable parameters --------------------------------
#define BS                 2              //  grid size (increase BS for finer grids) 
#define Re                 1000.0        //  Reynolds nunber (try the 100 - 10,000 range)
#define MACH               0.10           //  Mach number (try the 0.025 - 0.10 range)
#define MAX_T              100.0          //  Duration of simulation (in dimensionless time)


// ---------------------------------   the rest of the program  -------------------------------
#include <stdio.h>
#include <conio.h>
#include <math.h>
#include <stdlib.h>

#define y_dim              BS*77
#define x_dim              BS*105

#define cs                 (sqrt(0.5))

#define DENSITY            1.0
#define U                  (MACH*cs)

#define pi                 (4.0*atan(1.0))

#define d_iter_01          100
#define d_iter_02          2000
#define d_iter_03          20

#define MAX_DIR            7

//-------------------------  variable declarations ------------------------
double H, visc, COEF;
int   iter,n_iter_01, n_iter_02,n_iter_03;
double si[x_dim][y_dim];

// ---------------- structure for the constant parameters -----------------
int ex[MAX_DIR]; int ey[MAX_DIR]; double cx[MAX_DIR]; double cy[MAX_DIR]; 

// ------ structure for the transferable grid dependent variables ---------
typedef struct{ double DIR[MAX_DIR]; } EQU;

EQU    *F_in, *F_out;
int    *bdr_state;

/*---------------------------------------------------------------------------------------------*/
/*------------------>                 allocate_memory                       <------------------*/
/*---------------------------------------------------------------------------------------------*/
void allocate_memory(void){

	int size_a = (x_dim*y_dim)*sizeof(EQU);	
	int size_b = (x_dim*y_dim)*sizeof(int);	

	// allocate memory for all transferable and resident cpu and gpu veriables 
	F_in  = (EQU*) malloc(size_a);
	F_out = (EQU*) malloc(size_a);
	bdr_state = (int*) malloc(size_b);

}

/*---------------------------------------------------------------------------------------------*/
/*------------------>        the equilibrium distribution of the d2z6 mode  <------------------*/
/*---------------------------------------------------------------------------------------------*/
EQU get_equ(double u, double v, double ro){

   EQU res;
   double e;
   double uv, u__2;
   int i;

   u__2 = u*u + v*v;

   res.DIR[0] = 0.0;

   // ----------------- calc the streaming vector  --------------
   for(i=1; i<=6; ++i){
     uv = cx[i]*u + cy[i]*v;
	 e = (1.0 - u__2)/(1.0 + u__2 - 2.0*uv);
     res.DIR[i] = ro*e/6.0;
   }

   return(res);

}

/*---------------------------------------------------------------------------------------------*/
/*--------------->                setting the entry nodes                         <------------*/
/*---------------------------------------------------------------------------------------------*/
void reset_driving_nodes(void){
  int id, i,j,k;
  double u,v,ro;

  EQU equ_dist;

  ro = DENSITY;
  u = U;   
  v = 0.0;

  equ_dist = get_equ(u,v,ro);

  for(i=0;i<=x_dim-1;++i){
	j = y_dim-1;
	id = j*x_dim+i;

    for(k=0;k<=6;++k){F_in[id].DIR[k]  =  equ_dist.DIR[k];}

  }  
}

/*---------------------------------------------------------------------------------------------*/
/*----------------->              initialize the main parameters           <-------------------*/
/*---------------------------------------------------------------------------------------------*/
void init_params(void){

  int k;
  double ang;

  COEF = 25.0;
  
  // ---- geometric parameters ----
  H=(y_dim+0.0)*sqrt(3.0)/2.0;
  
  // --- fluid parameters ----
  visc = H*U/Re;

  // --- code parameters ---
  n_iter_01 = d_iter_01;
  n_iter_02 = d_iter_02;
  n_iter_03 = d_iter_03;

  // ---- intervals for the neighbour nodes ---
  for(k=1;k<=6;++k){
	  ang = (k-1)*pi/3.0;
      cx[k] = cos(ang); 
      cy[k] = sin(ang); 
  }

  cx[0]=  0.0;  
  cy[0]=  0.0;

  // ------ intervals for the neighbour nodes -------
  ex[1] =  1;  ey[1] =  0;
  ex[2] =  0;  ey[2] =  1;
  ex[3] = -1;  ey[3] =  1;
  ex[4] = -1;  ey[4] =  0;
  ex[5] =  0;  ey[5] = -1;
  ex[6] =  1;  ey[6] = -1;
  ex[0] =  0;  ey[0] =  0;
}


/*---------------------------------------------------------------------------------------------*/
/*-------------------->    specify the boundry type of all nodes   <---------------------------*/
/*---------------------------------------------------------------------------------------------*/
void init_bdrs(void){
  double x0, x1, x;
  int i,j, id;
  
  // -------------- initializing the fluid nodes ----------------
  for(i=0;i<=(x_dim-1);++i){
    for(j=0;j<=(y_dim-1);++j){
	  id = j*x_dim + i;
      bdr_state[id] = 0;
    }
  }

  //  -------------  the left and right triangles ----------------
  for(i=0;i<=(x_dim-1);++i){
    for(j=0;j<=(y_dim-1);++j){
	  id = j*x_dim+i;
	  x = (i+0.0) + (j+0.0)*cos(pi/3.0);
	  x0 = (y_dim+0.0)*cos(pi/3.0) + 1.0;
	  x1 = (x_dim+0.0) - 1.0;
	  if(x<x0 || x>x1){bdr_state[id] = 1;}
	}
  }

   //  -------------  defining the bottom wall  ----------------
  for(i=0;i<=(x_dim-1);++i){
	  bdr_state[i] = 1;
  }

  // --------------- defining the side walls -------------------
  for(j=0;j<=(y_dim-1);++j){ 
	  bdr_state[j*x_dim] = 1;
	  bdr_state[j*x_dim + (x_dim-1)] = 1;
  }

}

/*---------------------------------------------------------------------------------------------*/
/*----->                           inittialize all nodes                                 <-----*/
/*---------------------------------------------------------------------------------------------*/
void init_nodes(void){
  int id, i,j,k;
  double u,v,ro;

  EQU equ_dist;

  u = 0.0;
  v = 0.0;
  ro = DENSITY;
  equ_dist = get_equ(u,v,ro);

  /* initializing the general nodes */
  for(j=0;j<=y_dim-1;++j){
    for(i=0;i<=x_dim-1;++i){
	  id = j*x_dim+i;
      for(k=0;k<=6;++k){
		  F_in[id].DIR[k] = equ_dist.DIR[k];
		  F_out[id].DIR[k] = equ_dist.DIR[k];
	  }
    }
  }
}

/*---------------------------------------------------------------------------------------------*/
/*--------------->                  initialize the variables                      <------------*/
/*---------------------------------------------------------------------------------------------*/
void initialize(void){
  init_params();
  init_bdrs();
  init_nodes();
}

/*---------------------------------------------------------------------------------------------*/
/*                              calculate the local density                                    */
/*---------------------------------------------------------------------------------------------*/
double calc_ro(int i,int j){
  double res;
  int id, k;
 
  id = j*x_dim+i;

  res=0.0;
  for(k=0;k<=6;++k){res +=  F_in[id].DIR[k];}
  return(res);
}

/*---------------------------------------------------------------------------------------------*/
/*                       calculate the u-component of the velocity                             */
/*---------------------------------------------------------------------------------------------*/
double calc_u(int i,int j){
  int id, k;
  double res,den;
  
  id = j*x_dim + i;

  res=0.0;
  den=calc_ro(i,j);
  for(k=1;k<=6;++k){res += F_in[id].DIR[k]*cx[k];}
  if(den != 0.0){res=res/den;}else{res=0.0;}
  return(res);
}

/*---------------------------------------------------------------------------------------------*/
/*                        calculate the v-component of the velocity                            */
/*---------------------------------------------------------------------------------------------*/
double calc_v(int i,int j){
  int id, k;
  double res,den;

  id = j*x_dim+i;

  res=0.0;
  den=calc_ro(i,j);
  for(k=1;k<=6;++k){res += F_in[id].DIR[k]*cy[k];}
  if(den != 0.0){res=res/den;}else{res=0.0;}
  return(res);
}


/*---------------------------------------------------------------------------------------------*/
/*                              calculate the local entropy                                    */
/*---------------------------------------------------------------------------------------------*/
double calc_S(int i,int j){
  double res, m;
  int id, k;
 
  id = j*x_dim+i;

  res=0.0;
  for(k=1;k<=6;++k){
	  m = F_in[id].DIR[k];
	  res +=  log(m);
  }

  res = res/6.0;

  return(res);
}
/*---------------------------------------------------------------------------------------------*/
/*                              calculate the pressure                                         */
/*---------------------------------------------------------------------------------------------*/
double calc_P(int i,int j){
  double res, ro, u, v, u__2;

  ro = calc_ro(i,j);
  u = calc_u(i,j);
  v = calc_v(i,j);
  u__2 = u*u + v*v;

  res = 0.5*ro*(1.0 - u__2);

  return(res);

}


/*---------------------------------------------------------------------------------------------*/
/* --------------->               non-boundary collisions                      <---------------*/
/*---------------------------------------------------------------------------------------------*/
void ord_col(int i,int j){

  int id, k;
  double ro,u,v, tau, u__2;

  EQU equ_dist;

  id = j*x_dim+i;

  /*-- calculating the local properties ---*/
  ro=calc_ro(i,j);
  u=calc_u(i,j);
  v=calc_v(i,j);
  u__2 = u*u + v*v;

  tau = 4.0*visc/(1.0 - u__2) + 0.5;

  /*-- calculating the local post-colision out-states ---*/
  equ_dist = get_equ(u,v,ro);

  for(k=0;k<=6;++k){
    F_out[id].DIR[k]  = F_in[id].DIR[k]-(F_in[id].DIR[k] - equ_dist.DIR[k])/tau;
  }

}

/*---------------------------------------------------------------------------------------------*/
/*--------------->                    boundary collisions                  <-------------------*/
/*---------------------------------------------------------------------------------------------*/
void bdr_col(int i,int j){
   int id = j*x_dim+i;
   F_out[id].DIR[1] = F_in[id].DIR[4];
   F_out[id].DIR[2] = F_in[id].DIR[5];
   F_out[id].DIR[3] = F_in[id].DIR[6];
   F_out[id].DIR[4] = F_in[id].DIR[1];
   F_out[id].DIR[5] = F_in[id].DIR[2];
   F_out[id].DIR[6] = F_in[id].DIR[3];
   F_out[id].DIR[0] = F_in[id].DIR[0];
}

/*---------------------------------------------------------------------------------------------*/
/*                Post-Collision streaming effect on the neighbouring nodes.                   */
/*---------------------------------------------------------------------------------------------*/
void stream(int i,int j){
  
  int id, nid, k,ni,nj;
  id = j*x_dim + i;
  
  for(k=0;k<=6;++k){
    ni = i+ex[k];
    nj = j+ey[k];
	nid = nj*x_dim + ni;
	if(ni>=0 && ni<=x_dim-1 && nj>=0 && nj<=y_dim-1){
		F_in[nid].DIR[k] = F_out[id].DIR[k];
	}
  }

}

/*---------------------------------------------------------------------------------------------*/
/*--------------                  Calculate the Si field                  ---------------------*/
/*---------------------------------------------------------------------------------------------*/
void rec_si(void){
  int id, i,j;
  double dx, dy;

  dx = 0.5;
  dy = 0.5*sqrt(3.0);

  /*--------- calculating the si field ----------*/
  for(i=0;i<=x_dim-1;++i){ si[i][0]=0.0; si[i][y_dim-1]=0.0;}
  for(j=0;j<=y_dim-1;++j){ si[0][j]=0.0; si[x_dim-1][j]=0.0;}

  for(i=1;i<=x_dim-2;++i){
    for(j=y_dim-2;j>=1;--j){
	  si[i][j] = si[i-1][j] - (calc_v(i-1,j)*dx - calc_v(i-1,j)*dy);	
	}
  }

  
  for(i=0;i<=x_dim-1;++i){
    for(j=y_dim-1;j>=0;--j){
		id = j*x_dim +i;
	  if(bdr_state[id] == 1){si[i][j] = 0.0;}
	}
  }
  
}

/*---------------------------------------------------------------------------------------------*/
/*---                     Preparing and recording the field data                           ----*/
/*---------------------------------------------------------------------------------------------*/
void rec_field(void){
  FILE *out;
  int i,j;

  double T, xx, yy, ro, u, v, S, P;
  double dx, dy, u2, v2, x0, x1, y0,  sai, u__2;

  int GRID_SIZE = x_dim - y_dim/2;

  dx = 0.5;
  dy = 0.5*sqrt(3.0);

  x0 = 0.5*(y_dim-1.0);
  x1 = x_dim - x0;
  y0 = 0.5*sqrt(3.0)*(y_dim-1.0);
  T = (iter + 0.0)*U/y0;

  out=fopen("FIELD.dat","w");
  
  fprintf(out,"title=\"Re=%2.0f iter=%d  T=%2.2f  GRID=%dx%d\"\n ",
	  Re,iter, T, GRID_SIZE, GRID_SIZE);

  fprintf(out,"variables=X, Y, si, u, v, ro, P, S\n");
  fprintf(out,"zone t=\"d2z6\",i=%d,j=%d\n",x_dim,y_dim);
  

  // ---------------- calculate the field variables ------------------
  for(j=y_dim-1;j>=0;--j){
    for(i=0;i<=x_dim-1;++i){
        sai = si[i][j];
		S = calc_S(i,j);
		ro = calc_ro(i,j);
		u  = calc_u(i,j);
        v  = calc_v(i,j);

		if(j<=y_dim-2){u2=calc_u(i,j+1);}else{u2 = u;}
		if(i<=x_dim-2){v2=calc_v(i+1,j);}else{v2 = v;}

		u__2 = u*u + v*v;

		xx=(i-0+0.0) + cos(pi/3.0)*(j-0+0.0);
        yy =  sin(pi/3.0)*(j-0+0.0);

		P = calc_P(i, j);

		xx = (xx - x0)/x1;
		yy = yy/y0;

		if(xx < 0.0 || xx > 1.0 || yy < 0.0 || yy> 1.0){ 
			sai = 0.0;
			P = 0.0;
			u = 0.0;
			v = 0.0; 
			ro = 0.0;
			S = 0.0;
		}
		fprintf(out,"%f   %f   %f  %1.12f  %1.12f   %1.12f   %1.12f   %1.12f\n",
        xx,  yy,  sai, u/U,  v/U,  ro, P, S);
    }
  }
  fclose(out);
}



/*---------------------------------------------------------------------------------------------*/
/*---------------------->       cpu_run forward one time increment        <-----------------------*/
/*---------------------------------------------------------------------------------------------*/
void simulate(void){

  int i,j,id, b_state;

  reset_driving_nodes();

  // --- colision stage ---
  for(i=0;i<=x_dim-1;++i){
    for(j=0;j<=y_dim-1;++j){
		id = j*x_dim + i;
      b_state = bdr_state[id];
      if(b_state == 0){ord_col(i,j);}
      if(b_state == 1){bdr_col(i,j);}
    }
  }

  // --- streaming stage ---
  for(i=0;i<=x_dim-1;++i){
    for(j=0;j<=y_dim-1;++j){
      stream(i,j);
    }
  }
}

// ************************************************************************************
//                                     Display function
// ************************************************************************************
void display(void){

	  double y0, T;

      y0 = 0.5*sqrt(3.0)*(y_dim-1.0);
      T = (iter + 0.0)*U/y0;

      simulate(); 

	  if(iter > n_iter_01){
	    printf(" Iter = %d     T=%2.2f\n", iter, T);
	    n_iter_01 = n_iter_01+d_iter_01;
      }

	  if(iter > n_iter_02){
	    printf("\n\n updating the output data files ... \n\n");
        rec_si();
        rec_field();
	    n_iter_02=n_iter_02+d_iter_02;
      }

	  if(T >= MAX_T){
        rec_field();
		exit(0);
	  }

	  ++iter;
}

/*---------------------------------------------------------------------------------------------*/
/* ----------------->                 The main program                     <-------------------*/
/*---------------------------------------------------------------------------------------------*/
void main(void){    

	 iter = 0;
	 allocate_memory();
	 initialize();

	 while(1 == 1){display();}

}

